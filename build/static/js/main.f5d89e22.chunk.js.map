{"version":3,"sources":["components/Contact/Contact.module.css","components/Section/Section.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/Section/Section.js","Services/contacts-api.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/Form/Form.js","redux/contacts/contacts-actions.js","components/Filter/Filter.js","components/Contact/Contact.js","components/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/Form/Form.module.css"],"names":["module","exports","Section","title","children","className","s","section","axios","defaults","baseURL","addContactsNew","contact","name","number","post","then","r","data","deleteContactsNew","id","delete","fetchContacts","createAsyncThunk","a","contacts","get","addContact","deleteContact","getLoading","state","loading","getFilter","filter","getAllContacts","items","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","connect","dispatch","onSubmit","useState","setName","setNumber","nameInputId","shortid","generate","numberInputId","handleInputChange","event","target","value","reset","form","preventDefault","find","toast","label","htmlFor","input","type","onChange","pattern","required","btn","changeFilter","createAction","e","contactsActions","Contact","onDeleteContact","listItem","listItemName","onClick","isLoading","useEffect","list","map","App","autoClose","position","createReducer","fulfilled","_","payload","pending","rejected","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5d89e22.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"Contact_listItem__3hjFo\",\"listItemName\":\"Contact_listItemName__2n2WB\",\"btn\":\"Contact_btn__4lGd_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__n4wIW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1uNE3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2cMUn\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className={s.section}>\n      {title && <h2>{title}</h2>} {children}\n    </section>\n  );\n};\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\nexport default Section;\n","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://61a3e279d5e83300172921d8.mockapi.io';\r\n\r\nexport const fetchContactsNew = () => {\r\n  return axios.get('/contacts').then(r => r.data);\r\n};\r\n\r\nexport const addContactsNew = ({ name, number }) => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n  return axios.post('/contacts', contact).then(r => r.data);\r\n};\r\n\r\nexport const deleteContactsNew = id => {\r\n  return axios.delete(`/contacts/${id}`).then(r => r.data);\r\n};\r\n\r\n// export const addContact = (name, number) => dispatch => {\r\n//   const contact = {\r\n//     name,\r\n//     number,\r\n//   };\r\n\r\n//   dispatch(addContactRequest);\r\n\r\n//   axios\r\n//     .post('/contacts', contact)\r\n//     .then(({ data }) => dispatch(addContactSuccess(data)))\r\n//     .catch(error => dispatch(addContactError(error)));\r\n// };\r\n","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  fetchContactsNew,\r\n  addContactsNew,\r\n  deleteContactsNew,\r\n} from '../../Services/contacts-api';\r\n\r\naxios.defaults.baseURL = 'https://61a3e279d5e83300172921d8.mockapi.io';\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contacts/fetchContacts',\r\n  async () => {\r\n    const contacts = fetchContactsNew();\r\n    return contacts;\r\n  },\r\n);\r\n\r\nexport const addContact = createAsyncThunk(\r\n  'contacts/addContacts',\r\n  async ({ name, number }) => {\r\n    const contacts = addContactsNew({ name, number });\r\n    return contacts;\r\n  },\r\n);\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  'contacts/deleteContacts',\r\n  async id => {\r\n    const contacts = deleteContactsNew(id);\r\n\r\n    return contacts;\r\n  },\r\n);\r\n\r\n// export const deleteContact = id => dispatch => {\r\n//     dispatch(deleteContactRequest());\r\n\r\n//     axios\r\n//       .delete(`/contacts/${id}`)\r\n//       .then(() => dispatch(deleteContactSuccess(id)))\r\n//       .catch(error => dispatch(deleteContactError(error)));\r\n//   };\r\n\r\n// export const addContact = (name, number) => dispatch => {\r\n//   const contact = {\r\n//     name,\r\n//     number,\r\n//   };\r\n\r\n//   dispatch(addContactRequest);\r\n\r\n//   axios\r\n//     .post('/contacts', contact)\r\n//     .then(({ data }) => dispatch(addContactSuccess(data)))\r\n//     .catch(error => dispatch(addContactError(error)));\r\n// };\r\n\r\n// export const fetchContacts = () => dispatch => {\r\n//   dispatch(fetchContactRequest());\r\n//   axios\r\n//     .get('/contacts')\r\n//     .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n//     .catch(error => dispatch(fetchContactError(error)));\r\n// };\r\n","import { createSelector } from 'reselect';\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getAllContacts = state => state.contacts.items;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\n// export const getVisibleContacts = state => {\r\n//   const contacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n","import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getAllContacts } from '../../redux/contacts/contacts-selectors';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport s from './Form.module.css';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Form = ({ onSubmit, contacts }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (contacts.find(contact => contact.name === name)) {\n      toast(`${name}is already in contacts`);\n      reset();\n      return;\n    }\n\n    onSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label} htmlFor={nameInputId}>\n        Name\n      </label>\n\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleInputChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        id={nameInputId}\n      />\n\n      <label className={s.label} htmlFor={numberInputId}>\n        Phone\n      </label>\n\n      <input\n        className={s.input}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={handleInputChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        id={numberInputId}\n      />\n\n      <button className={s.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  contacts: getAllContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) => dispatch(addContact({ name, number })),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/change');\r\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\nimport s from './Filter.module.css';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    <input className={s.input} type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import PropTypes from 'prop-types';\nimport s from './Contact.module.css';\n\nconst Contact = ({ id, name, number, onDeleteContact }) => (\n  <li className={s.listItem} key={id}>\n    <p className={s.listItemName}>\n      {name} : {number}\n    </p>\n    <button className={s.btn} onClick={() => onDeleteContact(id)}>\n      Delete\n    </button>\n  </li>\n);\n\nexport default Contact;\n\nContact.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onDeleteContact: PropTypes.func,\n};\n","import Contact from '../Contact/Contact';\nimport {\n  addContact,\n  deleteContact,\n  fetchContacts,\n} from '../../redux/contacts/contacts-operations';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\nimport { useEffect } from 'react';\nimport {\n  getVisibleContacts,\n  getLoading,\n} from '../../redux/contacts/contacts-selectors';\n\nconst ContactList = ({\n  contacts,\n  onDeleteContact,\n  fetchContacts,\n  isLoading,\n}) => {\n  useEffect(() => {\n    fetchContacts();\n  }, [fetchContacts]);\n\n  return (\n    <>\n      {isLoading && <h2>Loading...</h2>}\n      <ul className={s.list}>\n        {contacts &&\n          contacts.map(({ id, name, number }) => (\n            <Contact\n              id={id}\n              name={name}\n              number={number}\n              key={id}\n              onDeleteContact={onDeleteContact}\n            />\n          ))}\n      </ul>\n    </>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n  isLoading: getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addContact: () => dispatch(addContact()),\n  fetchContacts: () => dispatch(fetchContacts()),\n  onDeleteContact: id => dispatch(deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import './App.css';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Section from './components/Section/Section';\nimport Form from './components/Form/Form';\n\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nconst App = () => {\n  return (\n    <div>\n      Homework-7\n      <Section title=\"Phone-book\">\n        <Form />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n\n        <ContactList />\n      </Section>\n      <ToastContainer autoClose={3000} position={'top-center'} />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n} from './contacts-operations';\r\n\r\nimport { changeFilter } from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\r\n  [addContact.fulfilled]: (state, { payload }) => {\r\n    return [...state, payload];\r\n  },\r\n\r\n  [deleteContact.fulfilled]: (state, { payload }) => {\r\n    return state.filter(contact => contact.id !== payload.id);\r\n  },\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContacts.pending]: () => true,\r\n  [fetchContacts.fulfilled]: () => false,\r\n  [fetchContacts.rejected]: () => false,\r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n  [deleteContact.pending]: () => true,\r\n  [deleteContact.fulfilled]: () => false,\r\n  [deleteContact.rejected]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case [actions.changeFilter]:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Form_label__31_B3\",\"input\":\"Form_input__3eLVJ\",\"btn\":\"Form_btn__3U3DB\"};"],"sourceRoot":""}